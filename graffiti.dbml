Project "None" {
  database_type: 'SQLite'
  Note: '''None
  Last Updated At 10-22-2024 02:22PM UTC'''
}

enum graffiti.char_alias_alias_type {
  "ALIAS" [note: '''Alias''']
  "WALL" [note: '''Wall name''']
}

enum graffiti.char_ancillarysource_item_type {
  "image" [note: '''Image''']
  "newsprint" [note: '''Newsprint''']
  "wall" [note: '''Wall''']
  "letter" [note: '''Letter''']
  "photograph" [note: '''Photograph''']
  "drawing" [note: '''Drawing''']
  "artwork" [note: '''Artwork''']
  "game" [note: '''Game''']
  "poem" [note: '''Poem''']
  "other" [note: '''Other''']
}

enum graffiti.char_documentpersonrole_role {
  "SENDER" [note: '''Sender''']
  "RECIPIENT" [note: '''Recipient''']
  "GRANTEE" [note: '''Grantee''']
  "GRANTOR" [note: '''Grantor''']
}

Table accounts.Contributor {
  Note: '''
Contributor(user)

*DB table: accounts_contributor*'''

  user_id one_to_one [pk, unique, not null]

  indexes {
    (user_id) [pk, unique, name: 'accounts_contributor_pkey', type: btree]
  }
}
ref: accounts.Contributor.user_id - accounts.CustomUser.id


Table accounts.CustomUser {
  Note: '''
CustomUser(id, password, last_login, is_superuser, username, first_name, last_name, email, is_active, date_joined, is_staff, is_volunteer, is_student, is_contributor)

*DB table: accounts_customuser*'''

  id big_auto [pk, unique, not null]
  password char [not null]
  last_login date_time [null]
  is_superuser boolean [note: '''Designates that this user has all permissions without explicitly assigning them.''', default:`False`, not null]
  username char [note: '''Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.''', unique, not null]
  first_name char [not null]
  last_name char [not null]
  email email [not null]
  is_active boolean [note: '''Designates whether this user should be treated as active. Unselect this instead of deleting accounts.''', default:`True`, not null]
  date_joined date_time [default:`django.utils.timezone.now()`, not null]
  is_staff boolean [default:`True`, not null]
  is_volunteer boolean [default:`False`, not null]
  is_student boolean [default:`False`, not null]
  is_contributor boolean [default:`False`, not null]

  indexes {
    (id) [pk, unique, name: 'accounts_customuser_pkey', type: btree]
    (username) [unique, name: 'accounts_customuser_username_key', type: btree]
  }
}


Table accounts.Student {
  Note: '''
Student(user)

*DB table: accounts_student*'''

  user_id one_to_one [pk, unique, not null]

  indexes {
    (user_id) [pk, unique, name: 'accounts_student_pkey', type: btree]
  }
}
ref: accounts.Student.user_id - accounts.CustomUser.id


Table accounts.Volunteer {
  Note: '''
Volunteer(user)

*DB table: accounts_volunteer*'''

  user_id one_to_one [pk, unique, not null]

  indexes {
    (user_id) [pk, unique, name: 'accounts_volunteer_pkey', type: btree]
  }
}
ref: accounts.Volunteer.user_id - accounts.CustomUser.id


Table accounts.customuser_groups {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: accounts_customuser_groups*'''

  id auto [pk, not null]
  group_id auto
  customuser_id auto

  indexes {
    (customuser_id) [name: 'accounts_customuser_groups_customuser_id_bc55088e', type: btree]
    (customuser_id,group_id) [unique, name: 'accounts_customuser_groups_customuser_id_group_id_c074bdcb_uniq', type: btree]
    (group_id) [name: 'accounts_customuser_groups_group_id_86ba5f9e', type: btree]
    (id) [pk, unique, name: 'accounts_customuser_groups_pkey', type: btree]
  }
}
ref: accounts.CustomUser.id > accounts.customuser_groups.customuser_id
ref: auth.Group.id > accounts.customuser_groups.group_id


Table accounts.customuser_user_permissions {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: accounts_customuser_user_permissions*'''

  id auto [pk, not null]
  permission_id auto
  customuser_id auto

  indexes {
    (customuser_id) [name: 'accounts_customuser_user_permissions_customuser_id_0deaefae', type: btree]
    (customuser_id,permission_id) [unique, name: 'accounts_customuser_user_permissions_customuser_id_permission_id_9632a709_uniq', type: btree]
    (permission_id) [name: 'accounts_customuser_user_permissions_permission_id_aea3d0e5', type: btree]
    (id) [pk, unique, name: 'accounts_customuser_user_permissions_pkey', type: btree]
  }
}
ref: accounts.CustomUser.id > accounts.customuser_user_permissions.customuser_id
ref: auth.Permission.id > accounts.customuser_user_permissions.permission_id


Table auth.Group {
  Note: '''
Groups are a generic way of categorizing users to apply permissions, or
some other label, to those users. A user can belong to any number of
groups.

A user in a group automatically has all the permissions granted to that
group. For example, if the group 'Site editors' has the permission
can_edit_home_page, any user in that group will have that permission.

Beyond permissions, groups are a convenient way to categorize users to
apply some label, or extended functionality, to them. For example, you
could create a group 'Special users', and you could write code that would
do special things to those users -- such as giving them access to a
members-only portion of your site, or sending them members-only email
messages.


*DB table: auth_group*'''

  id auto [pk, unique, not null]
  name char [unique, not null]

  indexes {
    (name) [unique, name: 'auth_group_name_key', type: btree]
    (id) [pk, unique, name: 'auth_group_pkey', type: btree]
  }
}


Table auth.Permission {
  Note: '''
The permissions system provides a way to assign permissions to specific
users and groups of users.

The permission system is used by the Django admin site, but may also be
useful in your own code. The Django admin site uses permissions as follows:

- The "add" permission limits the user's ability to view the "add" form
and add an object.
- The "change" permission limits a user's ability to view the change
list, view the "change" form and change an object.
- The "delete" permission limits the ability to delete an object.
- The "view" permission limits the ability to view an object.

Permissions are set globally per type of object, not per specific object
instance. It is possible to say "Mary may change news stories," but it's
not currently possible to say "Mary may change news stories, but only the
ones she created herself" or "Mary may only change news stories that have a
certain status or publication date."

The permissions listed above are automatically created for each model.


*DB table: auth_permission*'''

  id auto [pk, unique, not null]
  name char [not null]
  content_type_id foreign_key [not null]
  codename char [not null]

  indexes {
    (content_type_id) [name: 'auth_permission_content_type_id_2f476e4b', type: btree]
    (content_type_id,codename) [unique, name: 'auth_permission_content_type_id_codename_01ab375a_uniq', type: btree]
    (id) [pk, unique, name: 'auth_permission_pkey', type: btree]
  }
}
ref: auth.Permission.content_type_id > contenttypes.ContentType.id


Table auth.group_permissions {
  Note: '''
This is a Many-To-Many linking table autogenerated by Django.

*DB table: auth_group_permissions*'''

  id auto [pk, not null]
  permission_id auto
  group_id auto

  indexes {
    (group_id) [name: 'auth_group_permissions_group_id_b120cbf9', type: btree]
    (group_id,permission_id) [unique, name: 'auth_group_permissions_group_id_permission_id_0cd325b0_uniq', type: btree]
    (permission_id) [name: 'auth_group_permissions_permission_id_84c5c92e', type: btree]
    (id) [pk, unique, name: 'auth_group_permissions_pkey', type: btree]
  }
}
ref: auth.Group.id > auth.group_permissions.group_id
ref: auth.Permission.id > auth.group_permissions.permission_id


Table contenttypes.ContentType {
  Note: '''
ContentType(id, app_label, model)

*DB table: django_content_type*'''

  id auto [pk, unique, not null]
  app_label char [not null]
  model char [not null]

  indexes {
    (app_label,model) [unique, name: 'django_content_type_app_label_model_76bd3d3b_uniq', type: btree]
    (id) [pk, unique, name: 'django_content_type_pkey', type: btree]
  }
}


Table graffiti.Alias {
  Note: '''
Alias(id, name, alias_type, person)

*DB table: graffiti_alias*'''

  id big_auto [pk, unique, not null]
  name char [not null]
  alias_type graffiti.char_alias_alias_type [not null]
  person_id foreign_key [default:`None`, not null]

  indexes {
    (person_id) [name: 'graffiti_alias_person_id_c5c9f635', type: btree]
    (id) [pk, unique, name: 'graffiti_alias_pkey', type: btree]
  }
}
ref: graffiti.Alias.person_id > graffiti.Person.id


Table graffiti.AncillarySource {
  Note: '''
AncillarySource(id, title, image, item_type, creator, description, contributor, date, language, site, archive, box, folder, access_rights, graffiti_id, location, latitude, longitude, transcription, updated_at, created_at)

*DB table: graffiti_ancillarysource*'''

  id big_auto [pk, unique, not null]
  title char [not null]
  image image [null]
  item_type graffiti.char_ancillarysource_item_type [not null]
  creator char [note: '''An entity primarily responsible for making the resource.''', null]
  description text [null]
  contributor char [note: '''An entity responsible for making contributions to the resource.''', null]
  date char [null]
  language char [null]
  site_id foreign_key [null]
  archive_id foreign_key [null]
  box char [null]
  folder char [null]
  access_rights char [null]
  graffiti_id_id foreign_key [null]
  location_id foreign_key [null]
  latitude float [null]
  longitude float [null]
  transcription text [null]
  updated_at date_time [not null]
  created_at date_time [not null]

  indexes {
    (archive_id) [name: 'graffiti_ancillarysource_archive_id_c581ca83', type: btree]
    (graffiti_id_id) [name: 'graffiti_ancillarysource_graffiti_id_id_3e485de5', type: btree]
    (location_id) [name: 'graffiti_ancillarysource_location_id_293b2e3f', type: btree]
    (id) [pk, unique, name: 'graffiti_ancillarysource_pkey', type: btree]
    (site_id) [name: 'graffiti_ancillarysource_site_id_e83e0a56', type: btree]
  }
}
ref: graffiti.AncillarySource.site_id > graffiti.Site.id
ref: graffiti.AncillarySource.archive_id > graffiti.Archive.id
ref: graffiti.AncillarySource.graffiti_id_id > graffiti.GraffitiWall.id
ref: graffiti.AncillarySource.location_id > graffiti.Location.id


Table graffiti.Archive {
  Note: '''
Archive(id, name, description, location, updated_at, created_at)

*DB table: graffiti_archive*'''

  id big_auto [pk, unique, not null]
  name char [not null]
  description text [null]
  location_id foreign_key [not null]
  updated_at date_time [not null]
  created_at date_time [not null]

  indexes {
    (location_id) [name: 'graffiti_archive_location_id_f6dd6704', type: btree]
    (id) [pk, unique, name: 'graffiti_archive_pkey', type: btree]
  }
}
ref: graffiti.Archive.location_id > graffiti.Location.id


Table graffiti.DocumentPersonRole {
  Note: '''
DocumentPersonRole(id, person, document, role)

*DB table: graffiti_documentpersonrole*'''

  id big_auto [pk, unique, not null]
  person_id foreign_key [not null]
  document_id foreign_key [not null]
  role graffiti.char_documentpersonrole_role [not null]

  indexes {
    (person_id,document_id,role) [name: 'graffiti_do_person__da20c1_idx', type: btree]
    (document_id) [name: 'graffiti_documentpersonrole_document_id_d412ebf1', type: btree]
    (person_id) [name: 'graffiti_documentpersonrole_person_id_d9206c6e', type: btree]
    (id) [pk, unique, name: 'graffiti_documentpersonrole_pkey', type: btree]
  }
}
ref: graffiti.DocumentPersonRole.person_id > graffiti.Person.id
ref: graffiti.DocumentPersonRole.document_id > graffiti.AncillarySource.id


Table graffiti.GraffitiPhoto {
  Note: '''
GraffitiPhoto(id, graffiti_id, name, image, identifier, canvas, canvas_coords, related_graffiti)

*DB table: graffiti_graffitiphoto*'''

  id big_auto [pk, unique, not null]
  graffiti_id_id foreign_key [note: '''Select the graffiti wall this photo belongs to.''', not null]
  name char [default:`"Name"`, not null]
  image image [null]
  identifier char [note: '''Identifier refers to the number produced by the camera/phone. Please ensure these match.''', not null]
  canvas text [null]
  canvas_coords text [default:`"[]"`, null]
  related_graffiti_id foreign_key [null]

  indexes {
    (graffiti_id_id) [name: 'graffiti_graffitiphoto_graffiti_id_id_ae5a77db', type: btree]
    (id) [pk, unique, name: 'graffiti_graffitiphoto_pkey', type: btree]
    (related_graffiti_id) [name: 'graffiti_graffitiphoto_related_graffiti_id_c423d04a', type: btree]
  }
}
ref: graffiti.GraffitiPhoto.graffiti_id_id > graffiti.GraffitiWall.id
ref: graffiti.GraffitiPhoto.related_graffiti_id > graffiti.GraffitiWall.id


Table graffiti.GraffitiWall {
  Note: '''
GraffitiWall(id, name, description, image, room, spatial_position, identifier, date_taken, site_id, created_at, updated_at)

*DB table: graffiti_graffitiwall*'''

  id big_auto [pk, unique, not null]
  name char [not null]
  description rich_text [null]
  image image [not null]
  room char [note: '''Record the room name/number.''', not null]
  spatial_position char [note: '''Record the region code for this wall (e.g., B1, C3.''', not null]
  identifier char [note: '''Identifier refers to the number produced by the camera/phone. Please ensure these match.''', not null]
  date_taken date [note: '''Record the date the photograph was taken.''', not null]
  site_id_id foreign_key [not null]
  created_at date_time [not null]
  updated_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'graffiti_graffitiwall_pkey', type: btree]
    (site_id_id) [name: 'graffiti_graffitiwall_site_id_id_44d19eae', type: btree]
  }
}
ref: graffiti.GraffitiWall.site_id_id > graffiti.Site.id


Table graffiti.Location {
  Note: '''
Location(id, place, address, city, state, latitude, longitude)

*DB table: graffiti_location*'''

  id big_auto [pk, unique, not null]
  place char [not null]
  address char [null]
  city char [null]
  state char [null]
  latitude decimal [note: '''If left blank, the system will attempt to geocode the information if address and state information are provided.''', null]
  longitude decimal [note: '''If left blank, the system will attempt to geocode the information if address and state information are provided.''', null]

  indexes {
    (id) [pk, unique, name: 'graffiti_location_pkey', type: btree]
  }
}


Table graffiti.Person {
  Note: '''
Person(id, name, description, image, date_of_birth, date_of_death, updated_at, created_at)

*DB table: graffiti_person*'''

  id big_auto [pk, unique, not null]
  name char [not null]
  description text [null]
  image image [null]
  date_of_birth date [note: '''Enter the date as YYYY-MM-DD.''', null]
  date_of_death date [note: '''Enter the date as YYYY-MM-DD.''', null]
  updated_at date_time [not null]
  created_at date_time [not null]

  indexes {
    (id) [pk, unique, name: 'graffiti_person_pkey', type: btree]
  }
}


Table graffiti.Site {
  Note: '''
Site(id, name, description, location, image, updated_at, created_at)

*DB table: graffiti_site*'''

  id big_auto [pk, unique, not null]
  name char [not null]
  description text [null]
  location_id foreign_key [null]
  image image [null]
  updated_at date_time [not null]
  created_at date_time [not null]

  indexes {
    (location_id) [name: 'graffiti_site_location_id_9ae12605', type: btree]
    (id) [pk, unique, name: 'graffiti_site_pkey', type: btree]
  }
}
ref: graffiti.Site.location_id > graffiti.Location.id


Table graffiti.WallRecordHistory {
  Note: '''
WallRecordHistory(id, photo_record, action, data, created_at, user)

*DB table: graffiti_wallrecordhistory*'''

  id big_auto [pk, unique, not null]
  photo_record_id foreign_key [not null]
  action char [not null]
  data date_time [not null]
  created_at date_time [not null]
  user_id foreign_key [null]

  indexes {
    (photo_record_id) [name: 'graffiti_wallrecordhistory_photo_record_id_64898aec', type: btree]
    (id) [pk, unique, name: 'graffiti_wallrecordhistory_pkey', type: btree]
    (user_id) [name: 'graffiti_wallrecordhistory_user_id_360aabf8', type: btree]
  }
}
ref: graffiti.WallRecordHistory.photo_record_id > graffiti.GraffitiWall.id
ref: graffiti.WallRecordHistory.user_id > accounts.CustomUser.id


